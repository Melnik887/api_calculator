name: CI/CD Pipeline

# Права доступа для пайплайна
permissions:
  contents: write  # Разрешает запись содержимого репозитория

# Триггер: запускать пайплайн при пуше в ветку main
on:
  push:
    branches: [ main ]
    # Удаляем paths-ignore, так как файла version.py нет в проекте

jobs:
  build:
    runs-on: ubuntu-latest  # Использовать последнюю версию Ubuntu для выполнения задач

    steps:
      # Шаг 1: Проверка кода из репозитория
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          persist-credentials: true  # Сохранять учетные данные для дальнейших шагов

      # Шаг 2: Настройка Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Устанавливаем Python версии 3.11

      # Шаг 3: Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip  # Обновляем pip до последней версии
          pip install -r app/requirements.txt  # Устанавливаем зависимости из requirements.txt

      # Шаг 4: Запуск Semgrep для статического анализа кода
      - name: Run Semgrep for Static Code Analysis
        uses: returntocorp/semgrep-action@v2
        with:
          config: p/python  # Используем преднастроенные правила для Python

      # Шаг 5: Сборка Docker-образа
      - name: Build Docker image
        run: |
          docker build -t melnik887/api_calculator:${{ github.run_number }}.${{ github.run_id }} .  # Сборка образа с уникальным тегом

      # Шаг 6: Запуск Trivy для сканирования Docker-образа на наличие уязвимостей
      - name: Run Trivy scan on Docker image
        uses: aquasecurity/trivy-action@v1
        with:
          image-ref: melnik887/api_calculator:${{ github.run_number }}.${{ github.run_id }}  # Указание образа для сканирования
          format: 'table'  # Формат отчета
          severity: 'CRITICAL,HIGH'  # Уровни критичности уязвимостей для отчета

      # Шаг 7: Вход в Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}  # Имя пользователя Docker Hub из секретов
          password: ${{ secrets.DOCKERHUB_PASSWORD }}  # Пароль или токен доступа Docker Hub из секретов

      # Шаг 8: Пуш Docker-образа с версионным тегом и тегом latest
      - name: Push Docker image with version tag
        run: |
          docker push melnik887/api_calculator:${{ github.run_number }}.${{ github.run_id }}  # Пуш образа с уникальным тегом
          docker tag melnik887/api_calculator:${{ github.run_number }}.${{ github.run_id }} melnik887/api_calculator:latest  # Тегирование образа как latest
          docker push melnik887/api_calculator:latest  # Пуш образа с тегом latest

      